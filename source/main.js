
let
map_data,
model_data,

// Particles
model_explosion,
model_blood,
model_gib,
model_gib_pieces = [],

// Enemies
model_grunt,
model_enforcer,
model_ogre,
model_zombie,
model_hound,

// Map Objects
model_barrel,
model_torch,

// Weapon view models
model_shotgun,
model_nailgun,
model_grenadelauncher,

// Pickups
model_pickup_nailgun,
model_pickup_grenadelauncher,
model_pickup_box,
model_pickup_grenades,
model_pickup_key,
model_door,

// Projectiles
model_grenade,
model_plasma, // aka. nail

// Sounds
sfx_enemy_hit,
sfx_enemy_gib,
sfx_enemy_hound_attack,

sfx_no_ammo,
sfx_hurt,

sfx_plasma_shoot,

sfx_shotgun_shoot,
sfx_shotgun_reload,

sfx_nailgun_shoot,
sfx_nailgun_hit,

sfx_grenade_shoot,
sfx_grenade_bounce,
sfx_grenade_explode,

game_load = async () => {
	r_init();

	// Create textures
	ttt(texture_data).map(r_create_texture);
	
	// Load map & model containers	
	map_data = await map_load_container(`data:application/octet-stream;base64,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`);///*DEBUG[*/ 'build/' + /*]*/ 'l');
	model_data = await model_load_container(`data:application/octet-stream;base64,AQcIAQYFCgYVCRIHHQUAFwcXEhAFEhISAAUDAQIAAAYCAQUAAAYFAQUEAQUGAAYBBiREDRsSDxsQDRgRDxcTDBUSChcQDxMTDBUPDw4ODQ8RDgcRDAcRDQgQChARCRAQCxEPDxsUDxcQDwwRCgkUDgAPDxwSERsSEBgREhUSExcQERUPEQ8REAcREgcREQgQFBARFREPExEPFAkUEAAPDRsUDxwSDhgSDxcUCxYSCxgQDhQTDRYPDw8ODRARDgsVDAoVDQoUChQOChQMDBQMDxsWDxgRDw4RCg4TDgUaDxwUERsUEBgSEhUUExcTEhYRERAREAoPEgoPEQsOExQVFBMVExMUERIaEQkGDRoUDxsSDhcSDxYUCxQSCxcRDxMTDRUQDw4ODQ8RDggTDAcUDAgSCRIPCRIOCxIODxoWDxcRDw0RCw4UDQATDxsUERoUEBcSEhQTFBYSEhQQEQ8REAgREggREQkPFBITFRESExAREg4XEQQJDRsUDxwSDRgSDxcUDBUUChcTEBQTDBURDw8ODRARDgoPDQkPDQsOChQWCRQVCxMUDxsWDxgRDw4RDBIaDQkGDxwUERsUEBgSExYSExgQERYPERAREAoVEgsVEQoUFBQOFBQNEhQMEw4TEAUaDRoUDxsSDhcSDxYUDBQTCxYSDxQTDRQQDw4ODBARDggRDAgRDQkPChITCRESCxARDxoWDxcRDw0RDA4XDQQJDxsUERoUERcSExUSFBYRERUQERAREAcTEgcTEggSFRIPFRIOExIOFA4UEQETDRsSDxsQDRgRDxcTDBUSChcQDxMTDBQQDw4ODQ8RDgcRDAcRDQgQCxUXCxQVDBMWDxsUDxcQDwwRDBQeDgAPDxwSERsSEBgRERUTEhcSExUREQ8REAcREgcREQgQEBMWERIVEBIUCRMYEAAPABUBAQIAABcRAQMAAAcFARYQAQIFAAMCAAkGAQcOAA0EAQMEABgDABsYAQgJAA0PABEIAQwJABwSAQQHABIGAQkLAAsUABIJABQMAQkMAQgKABQLAQUOAAcEARMNAQ4HABMOAQADABUAABYVAQIBAAcCABkaABoIAQoIABsGAQ8NAhYBAQMXABcBAQMYARofAB8ZAREXABcYARgbABkhAQgaABIcAB4IAQgeARscACMeARsdACMcASEiACIgARkfACEZACIhAR8aAh0cAQoQABkPABIZAAcVAAcJABIFHhkPHhIZHgcVHgcJHhIFAAMBAAUEAQMCAAUAAAcGAQcBAQcCAAkIAQMAAAUJAAkDAQgJAQUBAAcFAgUHAAcDARkXDhANCxENEBANExENEA0NEAkNFQ8NFw0NFQ8RFBwNGBUNGBURGhUNCQ8NBw0NCQ8RDgkNDg0NBBUNBhURBhUNChwNDgcNDwANEAcNAAMCABgWAQMAARgAAgYFAAgGAgcFAAoHAgoGAAsKAQwKAQsJAAwHAxAOABEQABMPABQTARQNARENAxQOABUUAhUTAhgXAhEeDRAZEBAZDRMPERMPDBEFEhEFDw0TDw8BDw4MDAkJEQoLCwkQEwoPDw8HDw8QDBMZEhMZDREYEBEYDRQPERQPDBIFEhIFDw4TDxABDw8NDAsAEQsDCwsYEwwWDxAHDxAQDBMZEhMZAAYBABAPAQYQABAAAQQIAAsGABADAQUCAAwIABAGAQIFAAUHAQoHAQwDAA4MAA8CAQkEAA0JAQQJAAUDAAsCAA0KAA4LAQ0IAQUIAA0HAQ4GAQ4IAwYAABACAQgKAAAAAAAeAB4AAB4eHgAAHgAeHh4AHh4eAQIAAAMCAAcDAQQAAAYEAAcGAQcCAQcFAQcBAQcEAREWCA8KGQ8KCA8SGQ8SGQYOGw0WAA0WGxIWABIWGw8QAA8QGw0HAA0HGxIHABIHGw8MAA8MAAIBAAQCAQQAAQMBAAQDAQQBAgcGAAkHAQkFAAoJAQgGAAkIAQoGAQoIAg4NABAMAQ4LABAOAQ8LABAPARANARALAwgHExUPDRUSDRUMDx0PFRUPDBUVDBUJDwkPExUPDRUSDRUMER4NFRUPDBUVDBUJDwkPExUPDRUSDRUMEBsRFRUPDBUVDBUJDwkPAAMBAQMCAQMAAgYFAAcGAQcEAQcF`);///*DEBUG[*/ 'build/' + /*]*/ 'm');

	// Create models. Many models share the same geometry just with different
	// sizes and textures.
	// 0: generic blob
	// 1: humanoid
	// 2: barrel
	// 3: q logo
	// 4: hound
	// 5: box
	// 6: nailgun
	// 7: torch

	model_q = model_init(model_data[3]);

	model_explosion = model_init(model_data[0], 0.1,0.1,0.1);
	model_blood = model_init(model_data[0], 0.1,0.2,0.1);
	model_gib = model_init(model_data[0], 0.3,0.6,0.3);
	
	model_grunt = model_init(model_data[1], 2.5,2.2,2.5);
	model_enforcer = model_init(model_data[1], 3,2.7,3);
	model_zombie = model_init(model_data[1], 1.5,2,1.5);
	model_ogre = model_init(model_data[1], 4,3,4);
	model_hound = model_init(model_data[4],2.5,2.5,2.5);

	model_barrel = model_init(model_data[2], 2, 2, 2);
	model_torch = model_init(model_data[7], 0.6,1,0.6);

	model_pickup_nailgun = model_init(model_data[6], 1, 1, 1);
	model_pickup_grenadelauncher = model_init(model_data[2], 1, 0.5, 0.5);
	model_pickup_box = model_init(model_data[5], 0.7, 0.7, 0.7);
	model_pickup_grenades = model_init(model_data[5], 0.5, 1, 0.5);
	model_pickup_key = model_init(model_data[5], 0.1, 0.7, 0.1);

	model_door = model_init(model_data[5], 5, 5, 0.5);
	
	model_shotgun = model_init(model_data[2], 1,0.2,0.2);
	model_grenadelauncher = model_init(model_data[2], 0.7,0.4,0.4);
	model_nailgun = model_init(model_data[6], 0.7,0.7,0.7);

	model_grenade = model_init(model_data[2], 0.3,0.3,0.3);
	model_nail = model_init(model_data[2], 0.5,0.1,0.1);

	// Take some parts from the grunt model and build individual giblet models
	// from it. Arms and legs and stuff...
	for (let i = 0; i < 204; i+=34) {
		let m = model_init(model_data[1], 2,1,2);
		m.f[0] += i;
		m.nv = 34;
		model_gib_pieces.push(m);
	}


	r_submit_buffer();
	requestAnimationFrame(run_frame);

	f.onclick = () => g.requestFullscreen();
	g.onclick = () => {
		g.onclick = () => c.requestPointerLock();
		g.onclick();
		// title_show_message('...');
		
		audio_init();

		setTimeout(()=> {
			// Generate sounds
			sfx_enemy_hit = audio_create_sound(135, [8,0,0,1,148,1,3,5,0,0,139,1,0,2653,0,2193,255,2,639,119,2,23,0,0,0,0,0,0,0]);
			sfx_enemy_gib = audio_create_sound(140, [7,0,0,1,148,1,7,5,0,1,139,1,0,4611,789,15986,195,2,849,119,3,60,0,0,0,1,10,176,1]);
			sfx_enemy_hound_attack = audio_create_sound(132, [8,0,0,1,192,1,8,0,0,1,120,1,0,5614,0,20400,192,1,329,252,1,55,0,0,1,1,8,192,3]);

			sfx_no_ammo = audio_create_sound(120, [8,0,0,0,96,1,8,0,0,0,0,0,255,0,0,1075,232,1,2132,255,0,0,0,0,0,0,0,0,0]);
			sfx_hurt = audio_create_sound(135, [7,3,140,1,232,3,8,0,9,1,139,3,0,4611,1403,34215,256,4,1316,255,0,0,0,1,0,1,7,255,0]);
			sfx_pickup = audio_create_sound(140, [7,0,0,1,187,3,8,0,0,1,204,3,0,4298,927,1403,255,0,0,0,3,35,0,0,0,0,0,0,0]);

			sfx_plasma_shoot = audio_create_sound(135, [8,0,0,1,147,1,6,0,0,1,159,1,0,197,1234,21759,232,2,2902,255,2,53,0,0,0,0,0,0,0]);

			sfx_shotgun_shoot = audio_create_sound(135, [7,3,0,1,255,1,6,0,0,1,255,1,112,548,1979,11601,255,2,2902,176,2,77,0,0,1,0,10,255,1]);
			sfx_shotgun_reload = audio_create_sound(125, [9,0,0,1,131,1,0,0,0,0,0,3,255,137,22,1776,255,2,4498,176,2,36,2,84,0,0,3,96,0]);

			sfx_nailgun_shoot = audio_create_sound(130, [7,0,0,1,132,1,8,4,0,1,132,2,162,0,0,8339,232,2,2844,195,2,40,0,0,0,0,0,0,0]);
			sfx_nailgun_hit = audio_create_sound(135, [8,0,0,1,148,1,0,0,0,0,0,1,255,0,0,2193,128,2,6982,119,2,23,0,0,0,0,0,0,0]);

			sfx_grenade_shoot = audio_create_sound(127, [8,0,0,1,171,1,9,3,0,1,84,3,96,2653,0,13163,159,2,3206,255,2,64,0,0,0,1,9,226,0]);
			sfx_grenade_bounce = audio_create_sound(168, [7,0,124,0,128,0,8,5,127,0,128,0,125,88,0,2193,125,1,1238,240,1,91,3,47,0,0,0,0,0]);
			sfx_grenade_explode = audio_create_sound(135, [8,0,0,1,195,1,6,0,0,1,127,1,255,197,1234,21759,232,2,1052,255,4,73,3,25,1,0,10,227,1]);


			audio_play(audio_create_song(...music_data), 1, 1);
			game_init(0);
			run_frame = game_run;
		},100); // Not sure why such a long delay is needed. Ideally we would 
		        // want to use requestAnimationFrame, but the previous DOM
		        // update (...) never makes it to the screen then ;/
	};
},

run_frame = (time_now) => {
	r_prepare_frame();

	r_draw(
		vec3(0,0,0), 0, 0, 1, 
		model_q.f[0], model_q.f[0], 0,
		model_q.nv
	);
	r_push_light(
		vec3(Math.sin(time_now*0.00033)*200, 100, -100),
		10, 255,192,32
	);
	r_push_light(
		vec3_rotate_y(vec3(0, 0, 100),time_now*0.00063),
		10, 32,64,255
	);
	r_push_light(
		vec3_rotate_y(vec3(100, 0, 0),time_now*0.00053),
		10, 196,128,255
	);
	
	r_end_frame();
	requestAnimationFrame(run_frame);
};

game_load();